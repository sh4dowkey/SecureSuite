name: Build cross-platform releases

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Give GITHUB_TOKEN write permissions for contents so release creation works
permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Install dependencies (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pyinstaller --onefile --name SecureSuite --distpath release main.py
          Get-ChildItem -Path release

      - name: Build with PyInstaller (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          pyinstaller --onefile --name SecureSuite --distpath release main.py
          ls -la release || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SecureSuite-${{ matrix.os }}
          path: release/**

  publish_release:
    name: Publish GitHub Release (collects build artifacts and uploads them)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: SecureSuite-ubuntu-latest
          path: artifacts/ubuntu || true

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: SecureSuite-windows-latest
          path: artifacts/windows || true

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: SecureSuite-macos-latest
          path: artifacts/macos || true

      - name: Collect built binaries
        run: |
          mkdir -p final_release
          find artifacts -type f -name "SecureSuite*" -exec cp {} final_release/ \; || true
          ls -la final_release

      - id: create_release
        name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: SecureSuite v${{ github.run_number }}
          body: Automated build by GitHub Actions run ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets (loop and upload using upload_url)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          set -e
          if [ -z "$UPLOAD_URL" ]; then
            echo "No upload_url from create_release step. Aborting."
            exit 1
          fi
          for f in final_release/*; do
            if [ -f "$f" ]; then
              filename=$(basename "$f")
              echo "Uploading $filename ..."
              curl --fail -s -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$f" \
                "$UPLOAD_URL?name=$filename"
              echo "Uploaded $filename"
            fi
          done
